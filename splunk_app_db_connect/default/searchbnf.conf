[dbxquery-command]
syntax = dbxquery connection=<string> query=<string> (maxrows=<int>)? (shortnames=<int>)? (output=<string>)? \
    (fetchsize=<int>)? (params=(<string>)+)?
shortdesc = Queries remote databases and generates Splunk events from the query results returned.
description = Use dbxquery to query remote databases and to generate Splunk events from the query results.\
    The dbxquery command is a generating command and should be used as the first command in the search.\p\\
    'connection' argument: The name of a configured database connection object.\p\\
    'query' argument: A SQL query.\
    You can also use a URL-encoded SQL query, but you must percent encode all spaces (%20).\p\\
    'maxrows' argument: Optional. The maximum number of rows to return. (default=100000)\p\\
    'shortnames' argument: Optional. (default=False)By default, the returned fields will be in the form \
    <TABLE>.<COLUMN>.<DATATYPE>. Setting the 'shortnames' argument to true will return fields called <COLUMN>.\p\\
    'output' argument: Set to either 'json' (the default) or 'csv'. For 'json' output,\
    '_raw' and '_time' fields will be generated.\
    The '_raw' field will contain the JSON representation of the event.\
    For 'csv' output, the '_raw' and '_time' fields are not generated, which can improve performance.\p\\
    'fetchsize' argument: Optional. The number of rows to return at a time from the database. (default=300)\
    To avoid running out of memory, the query result set is divided into multiple pieces \
    and returned to DB Connect one piece at a time. \
    This argument specifies how many rows are in each of those pieces. \
    Depending on the RPC server's maximum heap size and whether the \
    target database table contains any unusually large columns, \
    you may want to specify a smaller value for this argument. \
    The maximum value for this option is 10,000.\p\\
    'timeout' argument: Optional. (default=600) Specifies a timeout for queries in seconds. Setting 'timeout' to 0 \
    indicates no limit. Typically the value should be less than the query job's lifetime, which defaults to 10 minutes. \
    For more information, see http://docs.oracle.com/javase/8/docs/api/java/sql/Statement.html#setQueryTimeout-int- .\p\\
    'params' argument: Optional. Specifies one or more comma-separated parameters to be inserted into the SQL query at \
    the server end. Use this option to safely insert values into a SQL query, using a question mark (`?`) as a placeholder \
    in the query. Values will be sanitized by the server. To specify multiple parameters, separate them with commas and \
    surround the entire list of parameters with quotation marks (`"`).\p\\

comment1 = Query a database and return the short names
example1 = | dbxquery connection=mysql query="SELECT * FROM sakila.city" shortnames=true
comment2 = Query a database and return CSV formatted results with maximum 100 results
example2 = | dbxquery connection=mysql query="SELECT * FROM sakila.city" maxrows=100 output=csv timeout=300
comment3 = Query a database using a subsearch as query
example3 = | dbxquery connection=mysql [search source=*login.log | dedup userid | fields userid | eval users="'".userid."'," | table users | mvcombine users | nomv users | eval users=substr(ip,0,len(users)-1) | eval query="select * from user where userid in (".users.")" | return query]
category = reporting
maintainer = sni
usage = public
related = dbquery
tags = sql generate csv json database query


[dbxlookup-command]
syntax = dbxlookup (lookup=<string> | connection=<string> query=<string> [chunksize=<int>] ( <lookup-field> [AS <event-field>] )... \
        [ OUTPUT (<lookup-destfield> [AS <event-destfield>] )... ])
shortdesc = Perform lookup with the databases tables as lookup table.
description = Use dbxlookup to enrich your search events with the information stored in databases. \
    When using the dbxlookup command, if an OUTPUT clause is not specified, \
    all of the fields in the lookup table that are not the match field are used as output fields. \
    If the OUTPUT clause is specified, the output lookup fields overwrite existing fields. \
    'lookup' argument: The name of a pre-configured DBX lookup. The lookup can be configured \
    in DBX data_lab page.\p\\
    'connection' argument: The name of a pre-configured DBX connection.  The connection can be configured \
    in DBX configuration page.\p\\
    'chunksize' argument: specifies how many records will be looked up per SQL statement (default=1000)\p\\
    'query' argument: The sql to use to build the lookup table.\p\\
    <lookup-field> refers to a field in the lookup table to match against the events. You can specify multiple <lookup-field> values.\p\\
    <event-field> refers to a field the events from which to acquire the value to match in the lookup table. You can specify multiple <event-field> values.\
    (Default: The value of the <lookup-field>.)\p\\
    <lookup-destfield> refers to a field in the lookup table to be copied into the events. You can specify multiple <lookup-destfield> values.\p\\
    <event-destfield> refers to the field in the events. You can specify multiple <event-destfield> values.\
    (Default: The value of the <lookup-destfield> argument.)\p\\

comment1 = using the lookup "dbx_example" to enrich the results of a search.
example1 = <some search ...> | dbxlookup lookup="dbx_example"
comment2 = using the "connection" and "query" to build an inflight lookup table to enrich the results of a search
example2 = <some search ...> | dbxlookup connection="mysql" query="SELECT * FROM sakila.actor" actor_id OUTPUT first_name AS fn
comment3 = using the "connection" and "query" to build an inflight lookup table to enrich the results of a search without specifying output
example3 = <some search ...> | dbxlookup connection="mysql" query="SELECT * FROM sakila.actor" chunksize=100 actor_id
category = eventing
maintainer = lingda tang
usage = public
related = lookup
tags = sql lookup database

[dbxoutput-command]
syntax = dbxoutput output=<string>
shortdesc = With the context of predefined DBX output, write the splunk events into database.
description = dbxoutput command will read the events generated from the pipe, \
    then write these events back into databases.\p\\
    'output' argument: The name of a predefined DBX output. The output defines which connection to use and how to \
     map the splunk events into database tables.\p\\

comment1 = do some search, then save the result into databases.
example1 = <some search ...> | dbxoutput output="myoutput"
comment2 = read the data from database, perform some transformations then write back to database.
example2 = | dbxquery connection="mydb" query="select * from mytable" | eval foo=bar+baz | dbxoutput output=myoutput
category = streaming
maintainer = wenpin cui
usage = public
related = output
tags = sql output database

